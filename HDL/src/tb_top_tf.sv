// Test bench generated by generator_verilog.py

`timescale 1 ns / 1 ps

//import global_pkg::*;

module tb_top_tf();

// Defines
`define DEBUG 1

// Simulation signals /////////////////////////////////
  time    c_CLK = 4ns; // Clock periode
  integer clk_cnt = 0; // Clock counter
  string  FILE_IN_TPROJ[0:7] = {"TrackletProjections_TPROJ_L1L2H_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L5L6C_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L1L2I_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L5L6B_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L5L6D_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L1L2J_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L1L2G_L3PHIC_04.dat",
                                "TrackletProjections_TPROJ_L1L2F_L3PHIC_04.dat" };
  string  FILE_IN_VMSME[0:7] = {"VMStubs_VMSME_L3PHIC17n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC18n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC19n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC20n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC21n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC22n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC23n1_04D.dat",
                                "VMStubs_VMSME_L3PHIC24n1_04D.dat" };
  string  FILE_IN_AS         = "AllStubs_AS_L1PHIEn4_04.dat";
  string  FILE_OUT           =  "../../../../../output.txt";
  integer f_i_tproj [0:7];   // File handle
  integer f_i_vmsme [0:7];   // File handle
  integer f_i_as;            // File handle
  string  line;              // String value read from the file
  integer f_o;               // File handle
  integer rtn;               // Return value
// Signals to connect the DUT /////////////////
// Control signals
  logic clk     = 1'b0;
  logic reset   = 1'b1;
  logic en_proc = 1'b0;
  logic [2:0] bx_in_ProjectionRouter;
// PR inputs
  logic TPROJ_L3PHIC_dataarray_data_V_wea [7:0]             = '{default:0};
  logic [7:0] TPROJ_L3PHIC_dataarray_data_V_writeaddr [7:0] = '{default:'{default:0}};
  logic [59:0] TPROJ_L3PHIC_dataarray_data_V_din [7:0];
  logic TPROJ_L3PHIC_nentries_V_we [0:1][7:0]               = '{default:1};
  logic [7:0] TPROJ_L3PHIC_nentries_V_din [0:1][7:0]        = { {8'b00000001, 8'b00010111, 8'b00000100, 8'b00000001, 8'b00000000, 8'b00001010, 8'b00001010, 8'b00000110},
                                                                {8'b00000000, 8'b00001111, 8'b00001111, 8'b00000100, 8'b00000000, 8'b00001011, 8'b00000010, 8'b00001000} };
                                                                    //  1, 0,      23, 15,       4, 15,        1, 4,        0, 0,      10, 11,       10, 2,        6, 8
// ME inputs
  logic VMSME_L3PHIC17to24n1_dataarray_data_V_wea [7:0]             = '{default:0};
  logic [9:0] VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr [7:0] = '{default:'{default:0}};
  logic [13:0] VMSME_L3PHIC17to24n1_dataarray_data_V_din [7:0]; 
  logic VMSME_L3PHIC17to24n1_nentries_V_we [0:7][7:0]               = '{default:1};
  logic [6:0] VMSME_L3PHIC17to24n1_nentries_V_din [0:7][7:0]        = { {7'b0000000, 7'b0000000, 7'b0000000, 7'b0000000, 7'b0000000, 7'b0000000, 7'b0000000, 7'b0000000},
                                                                        {7'b0000010, 7'b0000101, 7'b0000000, 7'b0000010, 7'b0000100, 7'b0000001, 7'b0000000, 7'b0000000},
                                                                        {7'b0000000, 7'b0000001, 7'b0000010, 7'b0000010, 7'b0000010, 7'b0000001, 7'b0000000, 7'b0000000},
                                                                        {7'b0000001, 7'b0000001, 7'b0000011, 7'b0000001, 7'b0000011, 7'b0000100, 7'b0000100, 7'b0000011},
                                                                        {7'b0000010, 7'b0000010, 7'b0000011, 7'b0000000, 7'b0000000, 7'b0000100, 7'b0000011, 7'b0000001},
                                                                        {7'b0000001, 7'b0000001, 7'b0000110, 7'b0000010, 7'b0000010, 7'b0000001, 7'b0000010, 7'b0000001},
                                                                        {7'b0000000, 7'b0000001, 7'b0000000, 7'b0000000, 7'b0000010, 7'b0000011, 7'b0000000, 7'b0000000},
                                                                        {7'b0000010, 7'b0000011, 7'b0000001, 7'b0000000, 7'b0000000, 7'b0000001, 7'b0000000, 7'b0000001} };
// MC inputs
  logic AS_L3PHICn4_dataarray_data_V_wea                 = 1'b0;
  logic [9:0] AS_L3PHICn4_dataarray_data_V_writeaddr     = '{default:0};
  logic [35:0] AS_L3PHICn4_dataarray_data_V_din;
  logic AS_L3PHICn4_dataarray_nentries_V_we [0:7];
  logic [6:0] AS_L3PHICn4_dataarray_nentries_V_din [0:7];
// MC outputs
  logic FM_L1L2XX_L3PHIC_dataarray_data_V_enb            = 1'b0;
  logic [7:0] FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr = '{default:0};
  logic [44:0] FM_L1L2XX_L3PHIC_dataarray_data_V_dout;
  logic [6:0] FM_L1L2XX_L3PHIC_nentries_0_V_dout [0:1];
  logic FM_L5L6XX_L3PHIC_dataarray_data_V_enb            = 1'b0;
  logic [7:0] FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr = '{default:0};
  logic [44:0] FM_L5L6XX_L3PHIC_dataarray_data_V_dout;
  logic [6:0] FM_L5L6XX_L3PHIC_nentries_0_V_dout [0:1];
// More control signals
  logic [2:0] bx_out_MatchCalculator;
  logic MatchCalculator_done;
// Other related signals /////////////////
  logic [9:0] AS_L3PHICn4_dataarray_data_V_writeaddr_fscanf;


// Top module //////////////////////////////////////
top_tf top_tf_inst (
// Control signals
  .clk(clk),
  .reset(reset),
  .en_proc(en_proc),
  .bx_in_ProjectionRouter(bx_in_ProjectionRouter),
// PR inputs
  .TPROJ_L3PHIC_dataarray_data_V_wea(TPROJ_L3PHIC_dataarray_data_V_wea),
  .TPROJ_L3PHIC_dataarray_data_V_writeaddr(TPROJ_L3PHIC_dataarray_data_V_writeaddr),
  .TPROJ_L3PHIC_dataarray_data_V_din(TPROJ_L3PHIC_dataarray_data_V_din),
  .TPROJ_L3PHIC_nentries_V_we(TPROJ_L3PHIC_nentries_V_we),
  .TPROJ_L3PHIC_nentries_V_din(TPROJ_L3PHIC_nentries_V_din),
// ME inputs
  .VMSME_L3PHIC17to24n1_dataarray_data_V_wea(VMSME_L3PHIC17to24n1_dataarray_data_V_wea),
  .VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr(VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr),
  .VMSME_L3PHIC17to24n1_dataarray_data_V_din(VMSME_L3PHIC17to24n1_dataarray_data_V_din), 
  .VMSME_L3PHIC17to24n1_nentries_V_we(VMSME_L3PHIC17to24n1_nentries_V_we),
  .VMSME_L3PHIC17to24n1_nentries_V_din(VMSME_L3PHIC17to24n1_nentries_V_din),
// MC inputs
  .AS_L3PHICn4_dataarray_data_V_wea(AS_L3PHICn4_dataarray_data_V_wea),
  .AS_L3PHICn4_dataarray_data_V_writeaddr(AS_L3PHICn4_dataarray_data_V_writeaddr),
  .AS_L3PHICn4_dataarray_data_V_din(AS_L3PHICn4_dataarray_data_V_din),
  .AS_L3PHICn4_dataarray_nentries_V_we(AS_L3PHICn4_dataarray_nentries_V_we),
  .AS_L3PHICn4_dataarray_nentries_V_din(AS_L3PHICn4_dataarray_nentries_V_din),
// MC outputs
  .FM_L1L2XX_L3PHIC_dataarray_data_V_enb(FM_L1L2XX_L3PHIC_dataarray_data_V_enb),
  .FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr(FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr),
  .FM_L1L2XX_L3PHIC_dataarray_data_V_dout(FM_L1L2XX_L3PHIC_dataarray_data_V_dout),
  .FM_L1L2XX_L3PHIC_nentries_0_V_dout(FM_L1L2XX_L3PHIC_nentries_0_V_dout),
  .FM_L5L6XX_L3PHIC_dataarray_data_V_enb(FM_L5L6XX_L3PHIC_dataarray_data_V_enb),
  .FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr(FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr),
  .FM_L5L6XX_L3PHIC_dataarray_data_V_dout(FM_L5L6XX_L3PHIC_dataarray_data_V_dout),
  .FM_L5L6XX_L3PHIC_nentries_0_V_dout(FM_L5L6XX_L3PHIC_nentries_0_V_dout),
// More control signals
  .bx_out_MatchCalculator(bx_out_MatchCalculator),
  .MatchCalculator_done(MatchCalculator_done)
);


// Open files
initial  begin
 $dumpfile ("top_tf.vcd"); // Waveform
 $dumpvars; 
 for (int i = 0; i <= 7; i++) begin
//   f_i_tproj[i] = $fopen(FILE_IN_TPROJ[i],"r");
//   f_i_vmsme[i] = $fopen(FILE_IN_VMSME[i],"r");
 end
 f_i_as = $fopen(FILE_IN_AS,"r");
 f_o = $fopen(FILE_OUT,"w");
 $fwrite(f_o,"  time clk_cnt reset   enb readaddr FM_L1L2XX_L3PHIC_*_dout" , // Write header
                               "   enb readaddr FM_L1L2XX_L3PHIC_*_dout\n");
end 

// Clock generation and file writing
always begin
  #(c_CLK/2) clk = !clk; 
  if (clk==1'b1) begin // Writing the file
    $fwrite(f_o,"%6d %7d     %b     %b       %h            %h     %b       %h            %h\n",
             $time,clk_cnt,reset,FM_L1L2XX_L3PHIC_dataarray_data_V_enb, FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr, FM_L1L2XX_L3PHIC_dataarray_data_V_dout,
                                 FM_L5L6XX_L3PHIC_dataarray_data_V_enb, FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr, FM_L5L6XX_L3PHIC_dataarray_data_V_dout);
    clk_cnt = clk_cnt+1;
  end
end

// Print to stdout
`define DISP0 "\ttime, clk_cnt, reset, TPROJ_L3PHIC_dataarray_data_V_wea, TPROJ_L3PHIC_dataarray_data_V_writeaddr[0], TPROJ_L3PHIC_dataarray_data_V_din[0], \
VMSME_L3PHIC17to24n1_dataarray_data_V_wea, VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr[0], VMSME_L3PHIC17to24n1_dataarray_data_V_din[0], \
AS_L3PHICn4_dataarray_data_V_wea, AS_L3PHICn4_dataarray_data_V_writeaddr, AS_L3PHICn4_dataarray_data_V_din"
`define MON0  "%d, %d, %b,   %h,   %h,   %h,   %h,   %h,   %h,   %h,   %h,   %h", \
              $time, clk_cnt, reset, \
              {TPROJ_L3PHIC_dataarray_data_V_wea[7], TPROJ_L3PHIC_dataarray_data_V_wea[6], TPROJ_L3PHIC_dataarray_data_V_wea[5], TPROJ_L3PHIC_dataarray_data_V_wea[4], TPROJ_L3PHIC_dataarray_data_V_wea[3], TPROJ_L3PHIC_dataarray_data_V_wea[2], TPROJ_L3PHIC_dataarray_data_V_wea[1], TPROJ_L3PHIC_dataarray_data_V_wea[0]}, \
              TPROJ_L3PHIC_dataarray_data_V_writeaddr[0], TPROJ_L3PHIC_dataarray_data_V_din[0], \
              {VMSME_L3PHIC17to24n1_dataarray_data_V_wea[7], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[6], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[5], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[4], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[3], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[2], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[1], VMSME_L3PHIC17to24n1_dataarray_data_V_wea[0]}, \
              VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr[0], VMSME_L3PHIC17to24n1_dataarray_data_V_din[0], \
              AS_L3PHICn4_dataarray_data_V_wea, AS_L3PHICn4_dataarray_data_V_writeaddr, AS_L3PHICn4_dataarray_data_V_din
`define DISP1 "\ttime, clk_cnt, reset, \
FM_L1L2XX_L3PHIC_dataarray_data_V_enb, FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr, FM_L1L2XX_L3PHIC_dataarray_data_V_dout, \
FM_L5L6XX_L3PHIC_dataarray_data_V_enb, FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr, FM_L5L6XX_L3PHIC_dataarray_data_V_dout"
`define MON1  "%d, %d, %b,   %b, %h, %h,   %b, %h, %h", \
              $time, clk_cnt, reset, FM_L1L2XX_L3PHIC_dataarray_data_V_enb, FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr, FM_L1L2XX_L3PHIC_dataarray_data_V_dout, \
                                     FM_L5L6XX_L3PHIC_dataarray_data_V_enb, FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr, FM_L5L6XX_L3PHIC_dataarray_data_V_dout
generate
if (`DEBUG==1) begin
  initial  begin
    $display(`DISP0); 
    $monitor(`MON0); 
    $display(`DISP1); 
    $monitor(`MON1); 
    #(c_CLK*15)   $finish; // Finish simulation after x time units
  end 
end
else begin
  initial begin
    $display(`DISP1);
    #(c_CLK*500)  $finish; // Finish simulation after x time units
  end
  always begin
    #c_CLK  //if (vld_out) begin
              $display(`MON1); 
            //end
  end
end
endgenerate


parameter int c_EVENTS       = 100; // BX events
parameter int c_N_entries    = 108; // Number of entries: 108 = BX period with 240 MHz
parameter int c_EMDATA_WIDTH = 68;  // Max. bit width of emData
// Function to read emulation files
// todo: description
// todo: n_entries
// todo: n_head_col page
// todo: event counter at data assigment
// todo: print "1,   001,   f3f2107c5" should be 000
int n_entries[0:c_N_entries-1]; // 
logic [c_EMDATA_WIDTH-1:0]AS_L3PHICn4_dataarray[0:c_EVENTS-1][0:c_N_entries-1] = '{default:'{default:'{default:0}}};;
function int read_emData(input int file_handle, n_head_col, output logic [c_EMDATA_WIDTH-1:0]dataarray[0:c_EVENTS-1][0:c_N_entries-1], output int n_entries [0:c_N_entries-1]);
  integer n_bx;      // BX number
  integer rtn;       // Return value
  string  line;      // String value read from the file
  integer index;     // Read index
  logic   [9:0]addr [0:c_N_entries-1]; // Dummy read address
  string  str;       // Dummy read string
  
  n_bx = -1;
  while(! $feof(file_handle)) begin // Read until EoF
    rtn = $fgets(line, file_handle); // Read line
    if (line.substr(0,1) == "BX" || line == "") begin // Identify a header line or empty line
      n_bx            = n_bx +1;
      index           = 0;
      n_entries[n_bx] = 0;
      if (`DEBUG==1) begin $display("rtn=%d, header_line=%s", rtn, line); end
    end
    else begin
      rtn = $sscanf(line, "%x %s %x\n", addr[index], str, dataarray[n_bx][index]);
      if (`DEBUG==1 && index==0) begin $display("n_bx=%d, index=%d, rtn=%d, addr[index]=%x, str=%s, dataarray[n_bx][index]=%x, n_entries[n_bx]=%d", n_bx, index, rtn, addr[index], str, dataarray[n_bx][index], n_entries[n_bx]); end
      index           = index +1;
      n_entries[n_bx] = n_entries[n_bx] +1;
    end
  end
  return 0;
endfunction


// File read for inputs (from memory .dat files)
initial begin
  for (int i = 0; i <= 7; i++) begin
//      fscanf_rtn = $fscanf(f_i_tproj[i], "%h\n", TPROJ_L3PHIC_dataarray_data_V_din[i]);
//      fscanf_rtn = $fscanf(f_i_vmsme[i], "%h\n", VMSME_L3PHIC17to24n1_dataarray_data_V_din[i]);
  end
//    fscanf_rtn = $fscanf(f_i_as, "%b\n", AS_L3PHICn4_dataarray_data_V_din); // AS begin -------------------

  read_emData(f_i_as, 1, AS_L3PHICn4_dataarray, n_entries);

end
// Periodic test patterns
always begin
  #(c_CLK/2)  if (clk==1'b1 & FM_L1L2XX_L3PHIC_dataarray_data_V_enb==1'b1) begin // Increase counter for output
                FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr = FM_L1L2XX_L3PHIC_dataarray_data_V_readaddr+1;
              end
              if (clk==1'b1 & FM_L5L6XX_L3PHIC_dataarray_data_V_enb==1'b1) begin // Increase counter for output
                FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr = FM_L5L6XX_L3PHIC_dataarray_data_V_readaddr+1;
              end
              if (clk==1'b1 & reset==1'b0) begin // Input pattern
                for (int i = 0; i <= 7; i++) begin // TPROJ & VMSME begin -------------------
//                  TPROJ_L3PHIC_dataarray_data_V_din[i]               = TPROJ_L3PHIC_dataarray_data_V_din_arr[i][TPROJ_L3PHIC_dataarray_data_V_writeaddr];
//                  VMSME_L3PHIC17to24n1_dataarray_data_V_din[i]       = VMSME_L3PHIC17to24n1_dataarray_data_V_din[i][VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr];
                  TPROJ_L3PHIC_dataarray_data_V_wea                  = '{default:1};
                  VMSME_L3PHIC17to24n1_dataarray_data_V_wea          = '{default:1};
                  TPROJ_L3PHIC_dataarray_data_V_writeaddr[i]         = TPROJ_L3PHIC_dataarray_data_V_writeaddr[i] + 1;
                  VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr[i] = VMSME_L3PHIC17to24n1_dataarray_data_V_writeaddr[i] + 1;
                end // TPROJ & VMSME end -------------------
                AS_L3PHICn4_dataarray_data_V_din       = AS_L3PHICn4_dataarray[0][AS_L3PHICn4_dataarray_data_V_writeaddr][35:0]; // AS begin -------------------
                AS_L3PHICn4_dataarray_data_V_wea       = 1'b1;
                AS_L3PHICn4_dataarray_data_V_writeaddr = AS_L3PHICn4_dataarray_data_V_writeaddr +1; // AS end -------------------
              end
end
// Periodic events rising edge
// always @(posedge clk) begin
//   if (reset) en_proc = 1'b0;
//   else       en_proc = 1'b1;
// end
//Rest of testbench code after this line 
initial begin
  clk   = 1'b0;
  reset = 1'b1;
  bx_in_ProjectionRouter = 3'b110;
  #(c_CLK/2)
  #(c_CLK*9)    reset   = 1'b0;
                en_proc = 1'b1;
  #(c_CLK*10)   FM_L1L2XX_L3PHIC_dataarray_data_V_enb = 1'b1;
                FM_L5L6XX_L3PHIC_dataarray_data_V_enb = 1'b1;
  #(c_CLK*125)  bx_in_ProjectionRouter <= bx_in_ProjectionRouter + 1'b1;
  #(c_CLK*500)  for (int i = 0; i <= 7; i++) begin
                  $fclose(f_i_tproj[i]);
                end
                $fclose(f_o); 
                $finish;
end




endmodule
