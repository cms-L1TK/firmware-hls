#ifndef TrackletAlgorithm_VMRouter_parameters_h
#define TrackletAlgorithm_VMRouter_parameters_h

// Hardcoded number of memories and masks from the wiring.
// Generated by generate_VMR.py
// Contains number for the following VMRs: VMR_L1PHID VMR_L2PHIA VMR_L2PHIB VMR_L3PHIA VMR_L4PHIA VMR_L5PHIA VMR_L6PHIA VMR_D1PHIA VMR_D2PHIA VMR_D3PHIA VMR_D4PHIA VMR_D5PHIA

// Enums used to get the correct parameters
enum class phiRegions : char {A = 'A', B = 'B', C = 'C', D = 'D', E = 'E', F = 'F', G = 'G', H = 'H'};

// The functions that returns the LUTs and parameters
template<TF::layerDisk LayerDisk> const int* getPhiCorrTable();
template<TF::layerDisk LayerDisk> const int* getRzBitsInnerTable();
template<TF::layerDisk LayerDisk> const int* getRzBitsOverlapTable();
template<TF::layerDisk LayerDisk> const int* getRzBitsOuterTable();
template<TF::layerDisk LayerDisk, phiRegions Phi> const int* getFineBinTable();
template<TF::layerDisk LayerDisk, phiRegions Phi, int size> const ap_uint<size>* getBendCutInnerTable();
template<TF::layerDisk LayerDisk, phiRegions Phi, int size> const ap_uint<size>* getBendCutOverlapTable();
template<TF::layerDisk LayerDisk, phiRegions Phi, int size> const ap_uint<size>* getBendCutOuterTable();

template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumInputs();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumInputsDisk2S();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumASCopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumVMSTEICopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumVMSTEOLCopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumVMSTEOCopies();

template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getBendCutTableSize();

// Help function that converts an array of 0s and 1s to an ap_uint
template<int arraySize>
inline ap_uint<arraySize> arrayToInt(ap_uint<1> array[arraySize]) {
  ap_uint<arraySize> number;
  for(int i = 0; i < arraySize; i++) {
    #pragma HLS unroll
    number[i] = array[i];
  }
  return number;
}

// VMPhiCorr LUTs
template<> inline const int* getPhiCorrTable<TF::L1>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL1.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L2>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL2.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L3>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL3.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L4>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL4.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L5>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL5.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L6>(){
  static int lut[] = 
#include "../emData/VMR/tables/VMPhiCorrL6.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::D1>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D2>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D4>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D5>(){
  return nullptr;
}

// VMTableInner
template<> inline const int* getRzBitsInnerTable<TF::L1>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL1L2.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::L2>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL2L3.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::L3>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL3L4.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::L4>(){
  return nullptr;
}
template<> inline const int* getRzBitsInnerTable<TF::L5>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL5L6.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::L6>(){
  return nullptr;
}
template<> inline const int* getRzBitsInnerTable<TF::D1>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerD1D2.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::D2>(){
  return nullptr;
}
template<> inline const int* getRzBitsInnerTable<TF::D3>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerD3D4.tab"
  return lut;
}
template<> inline const int* getRzBitsInnerTable<TF::D4>(){
  return nullptr;
}
template<> inline const int* getRzBitsInnerTable<TF::D5>(){
  return nullptr;
}

// VMTableInner - Overlap
template<> inline const int* getRzBitsOverlapTable<TF::L1>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL1D1.tab"
  return lut;
}
template<> inline const int* getRzBitsOverlapTable<TF::L2>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableInnerL2D1.tab"
  return lut;
}
template<> inline const int* getRzBitsOverlapTable<TF::L3>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::L4>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::L5>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::L6>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::D1>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::D2>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::D4>(){
  return nullptr;
}
template<> inline const int* getRzBitsOverlapTable<TF::D5>(){
  return nullptr;
}

// VMTableOuter
template<> inline const int* getRzBitsOuterTable<TF::L1>(){
  return nullptr;
}
template<> inline const int* getRzBitsOuterTable<TF::L2>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterL2.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::L3>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterL3.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::L4>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterL4.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::L5>(){
  return nullptr;
}
template<> inline const int* getRzBitsOuterTable<TF::L6>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterL6.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::D1>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterD1.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::D2>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterD2.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getRzBitsOuterTable<TF::D4>(){
  static int lut[] =
#include "../emData/VMR/tables/VMTableOuterD4.tab"
  return lut;
}
template<> inline const int* getRzBitsOuterTable<TF::D5>(){
  return nullptr;
}

////////////////
// VMR_L1PHID //
////////////////
template<> constexpr int getNumInputs<TF::L1, phiRegions::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 7;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, phiRegions::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, phiRegions::D>(){ // Allstub memory
  return 5;
}
template<> constexpr int getBendCutTableSize<TF::L1, phiRegions::D>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::L1, phiRegions::D>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 5;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L1, phiRegions::D>()>* getBendCutInnerTable<TF::L1, phiRegions::D>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L1, phiRegions::D>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID13n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID13n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID13n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID13n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID13n5_vmbendcut.tab"
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID14n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID14n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID14n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID14n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID14n5_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID15n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID15n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID15n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID15n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID15n5_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID16n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID16n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID16n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID16n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHID16n5_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L1, phiRegions::D>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L1, phiRegions::D>()>* getBendCutOverlapTable<TF::L1, phiRegions::D>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L1, phiRegions::D>();
  // TE Overlap Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW7n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW7n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW7n3_vmbendcut.tab"
  // TE Overlap Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW8n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW8n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L1PHIW8n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOCopies<TF::L1, phiRegions::D>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L1, phiRegions::D>()>* getBendCutOuterTable<TF::L1, phiRegions::D>(){
  return nullptr;
}
template<> inline const int* getFineBinTable<TF::L1, phiRegions::D>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L1PHID_finebin.tab"
  return lut;
}

////////////////
// VMR_L2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L2, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, phiRegions::A>(){ // Allstub memory
  return 7;
}
template<> constexpr int getBendCutTableSize<TF::L2, phiRegions::A>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::L2, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::A>()>* getBendCutInnerTable<TF::L2, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::A>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII2n3_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII3n3_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHII4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L2, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 4;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::A>()>* getBendCutOverlapTable<TF::L2, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::A>();
  // TE Overlap Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX1n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX1n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX1n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] = {0};
  // TE Overlap Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX2n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX2n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX2n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIX2n8_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOCopies<TF::L2, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 5;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::A>()>* getBendCutOuterTable<TF::L2, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA1n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA2n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA2n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] = {0};
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA3n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA3n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA3n5_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA4n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA4n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA4n5_vmbendcut.tab"
  // TE Outer Memory 5
  ap_uint<1> tmpBendTable5n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA5n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA5n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA5n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA5n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA5n5_vmbendcut.tab"
  // TE Outer Memory 6
  ap_uint<1> tmpBendTable6n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA6n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA6n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA6n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA6n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA6n5_vmbendcut.tab"
  // TE Outer Memory 7
  ap_uint<1> tmpBendTable7n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA7n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA7n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA7n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA7n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA7n5_vmbendcut.tab"
  // TE Outer Memory 8
  ap_uint<1> tmpBendTable8n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA8n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA8n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA8n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA8n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIA8n5_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable5n1), arrayToInt<bendCutTableSize>(tmpBendTable5n2), arrayToInt<bendCutTableSize>(tmpBendTable5n3), arrayToInt<bendCutTableSize>(tmpBendTable5n4), arrayToInt<bendCutTableSize>(tmpBendTable5n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable6n1), arrayToInt<bendCutTableSize>(tmpBendTable6n2), arrayToInt<bendCutTableSize>(tmpBendTable6n3), arrayToInt<bendCutTableSize>(tmpBendTable6n4), arrayToInt<bendCutTableSize>(tmpBendTable6n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable7n1), arrayToInt<bendCutTableSize>(tmpBendTable7n2), arrayToInt<bendCutTableSize>(tmpBendTable7n3), arrayToInt<bendCutTableSize>(tmpBendTable7n4), arrayToInt<bendCutTableSize>(tmpBendTable7n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable8n1), arrayToInt<bendCutTableSize>(tmpBendTable8n2), arrayToInt<bendCutTableSize>(tmpBendTable8n3), arrayToInt<bendCutTableSize>(tmpBendTable8n4), arrayToInt<bendCutTableSize>(tmpBendTable8n5)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::L2, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L2PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_L2PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L2, phiRegions::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, phiRegions::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, phiRegions::B>(){ // Allstub memory
  return 10;
}
template<> constexpr int getBendCutTableSize<TF::L2, phiRegions::B>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::L2, phiRegions::B>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::B>()>* getBendCutInnerTable<TF::L2, phiRegions::B>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::B>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ5n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ5n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ5n3_vmbendcut.tab"
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ6n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ6n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ6n3_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ7n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ7n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ7n3_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ8n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ8n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIJ8n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L2, phiRegions::B>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 4;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::B>()>* getBendCutOverlapTable<TF::L2, phiRegions::B>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::B>();
  // TE Overlap Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY3n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY3n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY3n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY3n8_vmbendcut.tab"
  // TE Overlap Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY4n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY4n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY4n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIY4n8_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOCopies<TF::L2, phiRegions::B>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 5;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L2, phiRegions::B>()>* getBendCutOuterTable<TF::L2, phiRegions::B>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L2, phiRegions::B>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB9n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB9n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB9n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB9n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB9n5_vmbendcut.tab"
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB10n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB10n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB10n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB10n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB10n5_vmbendcut.tab"
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB11n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB11n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB11n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB11n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB11n5_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB12n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB12n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB12n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB12n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB12n5_vmbendcut.tab"
  // TE Outer Memory 5
  ap_uint<1> tmpBendTable5n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB13n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB13n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB13n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB13n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB13n5_vmbendcut.tab"
  // TE Outer Memory 6
  ap_uint<1> tmpBendTable6n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB14n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB14n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB14n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB14n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB14n5_vmbendcut.tab"
  // TE Outer Memory 7
  ap_uint<1> tmpBendTable7n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB15n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB15n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB15n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB15n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB15n5_vmbendcut.tab"
  // TE Outer Memory 8
  ap_uint<1> tmpBendTable8n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB16n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB16n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB16n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB16n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L2PHIB16n5_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable5n1), arrayToInt<bendCutTableSize>(tmpBendTable5n2), arrayToInt<bendCutTableSize>(tmpBendTable5n3), arrayToInt<bendCutTableSize>(tmpBendTable5n4), arrayToInt<bendCutTableSize>(tmpBendTable5n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable6n1), arrayToInt<bendCutTableSize>(tmpBendTable6n2), arrayToInt<bendCutTableSize>(tmpBendTable6n3), arrayToInt<bendCutTableSize>(tmpBendTable6n4), arrayToInt<bendCutTableSize>(tmpBendTable6n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable7n1), arrayToInt<bendCutTableSize>(tmpBendTable7n2), arrayToInt<bendCutTableSize>(tmpBendTable7n3), arrayToInt<bendCutTableSize>(tmpBendTable7n4), arrayToInt<bendCutTableSize>(tmpBendTable7n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable8n1), arrayToInt<bendCutTableSize>(tmpBendTable8n2), arrayToInt<bendCutTableSize>(tmpBendTable8n3), arrayToInt<bendCutTableSize>(tmpBendTable8n4), arrayToInt<bendCutTableSize>(tmpBendTable8n5)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::L2, phiRegions::B>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L2PHIB_finebin.tab"
  return lut;
}

////////////////
// VMR_L3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L3, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, phiRegions::A>(){ // Allstub memory
  return 3;
}
template<> constexpr int getBendCutTableSize<TF::L3, phiRegions::A>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::L3, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 6;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L3, phiRegions::A>()>* getBendCutInnerTable<TF::L3, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L3, phiRegions::A>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA1n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA1n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n6[bendCutTableSize] = {0};
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA2n6_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA3n6_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHIA4n6_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), arrayToInt<bendCutTableSize>(tmpBendTable1n6), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), arrayToInt<bendCutTableSize>(tmpBendTable2n6), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), arrayToInt<bendCutTableSize>(tmpBendTable3n6), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5), arrayToInt<bendCutTableSize>(tmpBendTable4n6)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L3, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L3, phiRegions::A>()>* getBendCutOverlapTable<TF::L3, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::L3, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L3, phiRegions::A>()>* getBendCutOuterTable<TF::L3, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L3, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII2n3_vmbendcut.tab"
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII3n3_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L3PHII4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::L3, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L3PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_L4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L4, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, phiRegions::A>(){ // Allstub memory
  return 3;
}
template<> constexpr int getBendCutTableSize<TF::L4, phiRegions::A>(){
  return 16;
}
template<> constexpr int getNumVMSTEICopies<TF::L4, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L4, phiRegions::A>()>* getBendCutInnerTable<TF::L4, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L4, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L4, phiRegions::A>()>* getBendCutOverlapTable<TF::L4, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::L4, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L4, phiRegions::A>()>* getBendCutOuterTable<TF::L4, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L4, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] = {0};
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA3n3_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA4n3_vmbendcut.tab"
  // TE Outer Memory 5
  ap_uint<1> tmpBendTable5n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA5n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA5n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA5n3_vmbendcut.tab"
  // TE Outer Memory 6
  ap_uint<1> tmpBendTable6n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA6n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA6n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA6n3_vmbendcut.tab"
  // TE Outer Memory 7
  ap_uint<1> tmpBendTable7n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA7n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA7n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA7n3_vmbendcut.tab"
  // TE Outer Memory 8
  ap_uint<1> tmpBendTable8n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA8n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA8n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L4PHIA8n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable5n1), arrayToInt<bendCutTableSize>(tmpBendTable5n2), arrayToInt<bendCutTableSize>(tmpBendTable5n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable6n1), arrayToInt<bendCutTableSize>(tmpBendTable6n2), arrayToInt<bendCutTableSize>(tmpBendTable6n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable7n1), arrayToInt<bendCutTableSize>(tmpBendTable7n2), arrayToInt<bendCutTableSize>(tmpBendTable7n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable8n1), arrayToInt<bendCutTableSize>(tmpBendTable8n2), arrayToInt<bendCutTableSize>(tmpBendTable8n3)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::L4, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L4PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_L5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L5, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getBendCutTableSize<TF::L5, phiRegions::A>(){
  return 16;
}
template<> constexpr int getNumVMSTEICopies<TF::L5, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 8;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L5, phiRegions::A>()>* getBendCutInnerTable<TF::L5, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L5, phiRegions::A>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA1n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA1n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA1n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n6[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n7[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n8[bendCutTableSize] = {0};
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n7[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA2n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n8[bendCutTableSize] = {0};
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n7[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n8[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA3n8_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n4_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n6[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n6_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n7[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n7_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n8[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L5PHIA4n8_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), arrayToInt<bendCutTableSize>(tmpBendTable1n6), arrayToInt<bendCutTableSize>(tmpBendTable1n7), arrayToInt<bendCutTableSize>(tmpBendTable1n8), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), arrayToInt<bendCutTableSize>(tmpBendTable2n6), arrayToInt<bendCutTableSize>(tmpBendTable2n7), arrayToInt<bendCutTableSize>(tmpBendTable2n8), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), arrayToInt<bendCutTableSize>(tmpBendTable3n6), arrayToInt<bendCutTableSize>(tmpBendTable3n7), arrayToInt<bendCutTableSize>(tmpBendTable3n8), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5), arrayToInt<bendCutTableSize>(tmpBendTable4n6), arrayToInt<bendCutTableSize>(tmpBendTable4n7), arrayToInt<bendCutTableSize>(tmpBendTable4n8)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L5, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L5, phiRegions::A>()>* getBendCutOverlapTable<TF::L5, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::L5, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L5, phiRegions::A>()>* getBendCutOuterTable<TF::L5, phiRegions::A>(){
  return nullptr;
}
template<> inline const int* getFineBinTable<TF::L5, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L5PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_L6PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L6, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, phiRegions::A>(){ // Allstub memory
  return 3;
}
template<> constexpr int getBendCutTableSize<TF::L6, phiRegions::A>(){
  return 16;
}
template<> constexpr int getNumVMSTEICopies<TF::L6, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L6, phiRegions::A>()>* getBendCutInnerTable<TF::L6, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOLCopies<TF::L6, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L6, phiRegions::A>()>* getBendCutOverlapTable<TF::L6, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::L6, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 4;
}
template<> inline const ap_uint<getBendCutTableSize<TF::L6, phiRegions::A>()>* getBendCutOuterTable<TF::L6, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::L6, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA2n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] = {0};
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA3n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] = {0};
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA4n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA4n4_vmbendcut.tab"
  // TE Outer Memory 5
  ap_uint<1> tmpBendTable5n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA5n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA5n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA5n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable5n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA5n4_vmbendcut.tab"
  // TE Outer Memory 6
  ap_uint<1> tmpBendTable6n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA6n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA6n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA6n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable6n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA6n4_vmbendcut.tab"
  // TE Outer Memory 7
  ap_uint<1> tmpBendTable7n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA7n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA7n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA7n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable7n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA7n4_vmbendcut.tab"
  // TE Outer Memory 8
  ap_uint<1> tmpBendTable8n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA8n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA8n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA8n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable8n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_L6PHIA8n4_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable5n1), arrayToInt<bendCutTableSize>(tmpBendTable5n2), arrayToInt<bendCutTableSize>(tmpBendTable5n3), arrayToInt<bendCutTableSize>(tmpBendTable5n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable6n1), arrayToInt<bendCutTableSize>(tmpBendTable6n2), arrayToInt<bendCutTableSize>(tmpBendTable6n3), arrayToInt<bendCutTableSize>(tmpBendTable6n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable7n1), arrayToInt<bendCutTableSize>(tmpBendTable7n2), arrayToInt<bendCutTableSize>(tmpBendTable7n3), arrayToInt<bendCutTableSize>(tmpBendTable7n4), 
    arrayToInt<bendCutTableSize>(tmpBendTable8n1), arrayToInt<bendCutTableSize>(tmpBendTable8n2), arrayToInt<bendCutTableSize>(tmpBendTable8n3), arrayToInt<bendCutTableSize>(tmpBendTable8n4)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::L6, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_L6PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_D1PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D1, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D1, phiRegions::A>(){ // Allstub memory
  return 5;
}
template<> constexpr int getBendCutTableSize<TF::D1, phiRegions::A>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::D1, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D1, phiRegions::A>()>* getBendCutInnerTable<TF::D1, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::D1, phiRegions::A>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA2n3_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA3n3_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIA4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::D1, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D1, phiRegions::A>()>* getBendCutOverlapTable<TF::D1, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::D1, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 5;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D1, phiRegions::A>()>* getBendCutOuterTable<TF::D1, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::D1, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX1n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n4[bendCutTableSize] = {0};
  ap_uint<1> tmpBendTable1n5[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX2n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX2n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX2n6_vmbendcut.tab"
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX3n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX3n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX3n6_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX4n3_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n4[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX4n5_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n5[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D1PHIX4n6_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), arrayToInt<bendCutTableSize>(tmpBendTable1n4), arrayToInt<bendCutTableSize>(tmpBendTable1n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), arrayToInt<bendCutTableSize>(tmpBendTable2n4), arrayToInt<bendCutTableSize>(tmpBendTable2n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), arrayToInt<bendCutTableSize>(tmpBendTable3n4), arrayToInt<bendCutTableSize>(tmpBendTable3n5), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3), arrayToInt<bendCutTableSize>(tmpBendTable4n4), arrayToInt<bendCutTableSize>(tmpBendTable4n5)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::D1, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_D1PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_D2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D2, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D2, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getBendCutTableSize<TF::D2, phiRegions::A>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::D2, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D2, phiRegions::A>()>* getBendCutInnerTable<TF::D2, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOLCopies<TF::D2, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D2, phiRegions::A>()>* getBendCutOverlapTable<TF::D2, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::D2, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D2, phiRegions::A>()>* getBendCutOuterTable<TF::D2, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::D2, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA2n3_vmbendcut.tab"
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA3n3_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D2PHIA4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::D2, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_D2PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_D3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D3, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D3, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getBendCutTableSize<TF::D3, phiRegions::A>(){
  return 8;
}
template<> constexpr int getNumVMSTEICopies<TF::D3, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D3, phiRegions::A>()>* getBendCutInnerTable<TF::D3, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::D3, phiRegions::A>();
  // TE Inner Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Inner Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA2n3_vmbendcut.tab"
  // TE Inner Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA3n3_vmbendcut.tab"
  // TE Inner Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D3PHIA4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> constexpr int getNumVMSTEOLCopies<TF::D3, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D3, phiRegions::A>()>* getBendCutOverlapTable<TF::D3, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::D3, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D3, phiRegions::A>()>* getBendCutOuterTable<TF::D3, phiRegions::A>(){
  return nullptr;
}
template<> inline const int* getFineBinTable<TF::D3, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_D3PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_D4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D4, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D4, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getBendCutTableSize<TF::D4, phiRegions::A>(){
  return 16;
}
template<> constexpr int getNumVMSTEICopies<TF::D4, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D4, phiRegions::A>()>* getBendCutInnerTable<TF::D4, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOLCopies<TF::D4, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D4, phiRegions::A>()>* getBendCutOverlapTable<TF::D4, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::D4, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 3;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D4, phiRegions::A>()>* getBendCutOuterTable<TF::D4, phiRegions::A>(){
  const int bendCutTableSize = getBendCutTableSize<TF::D4, phiRegions::A>();
  // TE Outer Memory 1
  ap_uint<1> tmpBendTable1n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA1n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA1n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable1n3[bendCutTableSize] = {0};
  // TE Outer Memory 2
  ap_uint<1> tmpBendTable2n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA2n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA2n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable2n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA2n3_vmbendcut.tab"
  // TE Outer Memory 3
  ap_uint<1> tmpBendTable3n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA3n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA3n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable3n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA3n3_vmbendcut.tab"
  // TE Outer Memory 4
  ap_uint<1> tmpBendTable4n1[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA4n1_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n2[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA4n2_vmbendcut.tab"
  ap_uint<1> tmpBendTable4n3[bendCutTableSize] =
#include "../emData/VMR/tables/VMSTE_D4PHIA4n3_vmbendcut.tab"

  // Combine all the temporary tables into one big table
  static ap_uint<bendCutTableSize> bendCutTable[] = {
    arrayToInt<bendCutTableSize>(tmpBendTable1n1), arrayToInt<bendCutTableSize>(tmpBendTable1n2), arrayToInt<bendCutTableSize>(tmpBendTable1n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable2n1), arrayToInt<bendCutTableSize>(tmpBendTable2n2), arrayToInt<bendCutTableSize>(tmpBendTable2n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable3n1), arrayToInt<bendCutTableSize>(tmpBendTable3n2), arrayToInt<bendCutTableSize>(tmpBendTable3n3), 
    arrayToInt<bendCutTableSize>(tmpBendTable4n1), arrayToInt<bendCutTableSize>(tmpBendTable4n2), arrayToInt<bendCutTableSize>(tmpBendTable4n3)
  };

  return bendCutTable;
}
template<> inline const int* getFineBinTable<TF::D4, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_D4PHIA_finebin.tab"
  return lut;
}

////////////////
// VMR_D5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D5, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D5, phiRegions::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getBendCutTableSize<TF::D5, phiRegions::A>(){
  return 16;
}
template<> constexpr int getNumVMSTEICopies<TF::D5, phiRegions::A>(){ // TEInnermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D5, phiRegions::A>()>* getBendCutInnerTable<TF::D5, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOLCopies<TF::D5, phiRegions::A>(){ // TEOverlapmemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D5, phiRegions::A>()>* getBendCutOverlapTable<TF::D5, phiRegions::A>(){
  return nullptr;
}
template<> constexpr int getNumVMSTEOCopies<TF::D5, phiRegions::A>(){ // TEOutermemory. NOTE: can't use 0 if we don't have any memories of a certain type. Use 1.
  return 1;
}
template<> inline const ap_uint<getBendCutTableSize<TF::D5, phiRegions::A>()>* getBendCutOuterTable<TF::D5, phiRegions::A>(){
  return nullptr;
}
template<> inline const int* getFineBinTable<TF::D5, phiRegions::A>(){
  static int lut[] =
#include "../emData/VMR/tables/VMR_D5PHIA_finebin.tab"
  return lut;
}

#endif // TrackletAlgorithm_VMRouter_parameters_h
