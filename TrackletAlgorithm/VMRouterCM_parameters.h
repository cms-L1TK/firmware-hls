#ifndef TopFunctions_VMRouterCM_parameters_h
#define TopFunctions_VMRouterCM_parameters_h

// Hardcoded number of memories and masks from the wiring.
// Generated by generate_VMRCM.py

// The functions that returns parameters and LUTs
template<TF::layerDisk LayerDisk> const int* getPhiCorrTable();
template<TF::layerDisk LayerDisk> const int* getMETable();
template<TF::layerDisk LayerDisk> const int* getTETable();
template<TF::layerDisk LayerDisk> constexpr regionType getInputType();
template<TF::layerDisk LayerDisk> constexpr regionType getOutputType();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumInputs();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumInputsDisk2S();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumASCopies();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumASInnerCopies();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumTEOCopies();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getAllStubInnerMask();
// For Future Emulation
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumInputsFE();
template<TF::layerDisk LayerDisk, TF::phiRegion Phi> constexpr int getNumInputsDisk2SFE();

// VMPhiCorr LUTs
template<> inline const int* getPhiCorrTable<TF::L1>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL1.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL1.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L2>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL2.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL2.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L3>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL3.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL3.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L4>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL4.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL4.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L5>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL5.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL5.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L6>(){
  static int lut[] = 
#if __has_include("../emData/VMRCM/tables/VMPhiCorrL6.tab")
#  include "../emData/VMRCM/tables/VMPhiCorrL6.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::D1>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D2>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D4>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D5>(){
  return nullptr;
}

// ME Tables
template<> inline const int* getMETable<TF::L1>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L1.tab")
#  include "../emData/VMRCM/tables/VMRME_L1.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::L2>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L2.tab")
#  include "../emData/VMRCM/tables/VMRME_L2.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::L3>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L3.tab")
#  include "../emData/VMRCM/tables/VMRME_L3.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::L4>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L4.tab")
#  include "../emData/VMRCM/tables/VMRME_L4.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::L5>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L5.tab")
#  include "../emData/VMRCM/tables/VMRME_L5.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::L6>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_L6.tab")
#  include "../emData/VMRCM/tables/VMRME_L6.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::D1>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_D1.tab")
#  include "../emData/VMRCM/tables/VMRME_D1.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::D2>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_D2.tab")
#  include "../emData/VMRCM/tables/VMRME_D2.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::D3>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_D3.tab")
#  include "../emData/VMRCM/tables/VMRME_D3.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::D4>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_D4.tab")
#  include "../emData/VMRCM/tables/VMRME_D4.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getMETable<TF::D5>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRME_D5.tab")
#  include "../emData/VMRCM/tables/VMRME_D5.tab"
#else
  {};
#endif
  return lut;
}

// TE Tables
template<> inline const int* getTETable<TF::L1>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L2>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L3>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L4>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L5>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L6>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::D1>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRTE_D1.tab")
#  include "../emData/VMRCM/tables/VMRTE_D1.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getTETable<TF::D2>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRTE_D2.tab")
#  include "../emData/VMRCM/tables/VMRTE_D2.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getTETable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::D4>(){
  static int lut[] =
#if __has_include("../emData/VMRCM/tables/VMRTE_D4.tab")
#  include "../emData/VMRCM/tables/VMRTE_D4.tab"
#else
  {};
#endif
  return lut;
}
template<> inline const int* getTETable<TF::D5>(){
  return nullptr;
}

// InputType
template<> constexpr regionType getInputType<TF::L1>(){
  return BARRELPS;
}
template<> constexpr regionType getInputType<TF::L2>(){
  return BARRELPS;
}
template<> constexpr regionType getInputType<TF::L3>(){
  return BARRELPS;
}
template<> constexpr regionType getInputType<TF::L4>(){
  return BARREL2S;
}
template<> constexpr regionType getInputType<TF::L5>(){
  return BARREL2S;
}
template<> constexpr regionType getInputType<TF::L6>(){
  return BARREL2S;
}
template<> constexpr regionType getInputType<TF::D1>(){
  return DISKPS;
}
template<> constexpr regionType getInputType<TF::D2>(){
  return DISKPS;
}
template<> constexpr regionType getInputType<TF::D3>(){
  return DISKPS;
}
template<> constexpr regionType getInputType<TF::D4>(){
  return DISKPS;
}
template<> constexpr regionType getInputType<TF::D5>(){
  return DISKPS;
}

// OutputType
template<> constexpr regionType getOutputType<TF::L1>(){
  return BARRELPS;
}
template<> constexpr regionType getOutputType<TF::L2>(){
  return BARRELPS;
}
template<> constexpr regionType getOutputType<TF::L3>(){
  return BARRELPS;
}
template<> constexpr regionType getOutputType<TF::L4>(){
  return BARREL2S;
}
template<> constexpr regionType getOutputType<TF::L5>(){
  return BARREL2S;
}
template<> constexpr regionType getOutputType<TF::L6>(){
  return BARREL2S;
}
template<> constexpr regionType getOutputType<TF::D1>(){
  return DISK;
}
template<> constexpr regionType getOutputType<TF::D2>(){
  return DISK;
}
template<> constexpr regionType getOutputType<TF::D3>(){
  return DISK;
}
template<> constexpr regionType getOutputType<TF::D4>(){
  return DISK;
}
template<> constexpr regionType getOutputType<TF::D5>(){
  return DISK;
}

////////////////
// VMR_D1PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D1, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, TF::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D1, TF::A>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::D1, TF::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D1, TF::A>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::D1, TF::A>(){
  return 0b000110000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D1, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D1, TF::A>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D1PHIB //
////////////////
template<> constexpr int getNumInputs<TF::D1, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, TF::B>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D1, TF::B>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::D1, TF::B>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::D1, TF::B>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::D1, TF::B>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D1, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D1, TF::B>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D1PHIC //
////////////////
template<> constexpr int getNumInputs<TF::D1, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, TF::C>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D1, TF::C>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::D1, TF::C>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::D1, TF::C>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::D1, TF::C>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D1, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D1, TF::C>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D1PHID //
////////////////
template<> constexpr int getNumInputs<TF::D1, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, TF::D>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D1, TF::D>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::D1, TF::D>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D1, TF::D>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::D1, TF::D>(){
  return 0b000011000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D1, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D1, TF::D>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D2, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, TF::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D2, TF::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D2, TF::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D2, TF::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D2, TF::A>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D2, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D2, TF::A>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D2PHIB //
////////////////
template<> constexpr int getNumInputs<TF::D2, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 12;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, TF::B>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D2, TF::B>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D2, TF::B>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D2, TF::B>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D2, TF::B>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D2, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D2, TF::B>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D2PHIC //
////////////////
template<> constexpr int getNumInputs<TF::D2, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 12;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, TF::C>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D2, TF::C>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D2, TF::C>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D2, TF::C>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D2, TF::C>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D2, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D2, TF::C>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D2PHID //
////////////////
template<> constexpr int getNumInputs<TF::D2, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, TF::D>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D2, TF::D>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D2, TF::D>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D2, TF::D>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D2, TF::D>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D2, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D2, TF::D>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D3, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, TF::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D3, TF::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D3, TF::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D3, TF::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D3, TF::A>(){
  return 0b000110000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D3, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D3, TF::A>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D3PHIB //
////////////////
template<> constexpr int getNumInputs<TF::D3, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, TF::B>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D3, TF::B>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D3, TF::B>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::D3, TF::B>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D3, TF::B>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D3, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D3, TF::B>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D3PHIC //
////////////////
template<> constexpr int getNumInputs<TF::D3, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, TF::C>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D3, TF::C>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D3, TF::C>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::D3, TF::C>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D3, TF::C>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D3, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D3, TF::C>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D3PHID //
////////////////
template<> constexpr int getNumInputs<TF::D3, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, TF::D>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D3, TF::D>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D3, TF::D>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D3, TF::D>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D3, TF::D>(){
  return 0b000011000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D3, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D3, TF::D>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D4, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, TF::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D4, TF::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D4, TF::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D4, TF::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D4, TF::A>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D4, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D4, TF::A>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D4PHIB //
////////////////
template<> constexpr int getNumInputs<TF::D4, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, TF::B>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D4, TF::B>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D4, TF::B>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D4, TF::B>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D4, TF::B>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D4, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D4, TF::B>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D4PHIC //
////////////////
template<> constexpr int getNumInputs<TF::D4, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, TF::C>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D4, TF::C>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D4, TF::C>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D4, TF::C>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D4, TF::C>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D4, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D4, TF::C>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D4PHID //
////////////////
template<> constexpr int getNumInputs<TF::D4, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, TF::D>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D4, TF::D>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D4, TF::D>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D4, TF::D>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D4, TF::D>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D4, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D4, TF::D>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D5, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, TF::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D5, TF::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D5, TF::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D5, TF::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D5, TF::A>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D5, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D5, TF::A>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D5PHIB //
////////////////
template<> constexpr int getNumInputs<TF::D5, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, TF::B>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D5, TF::B>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D5, TF::B>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D5, TF::B>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D5, TF::B>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D5, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D5, TF::B>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D5PHIC //
////////////////
template<> constexpr int getNumInputs<TF::D5, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, TF::C>(){ // Number of DISK2S input memories
  return 4;
}
template<> constexpr int getNumASCopies<TF::D5, TF::C>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D5, TF::C>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D5, TF::C>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D5, TF::C>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D5, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D5, TF::C>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_D5PHID //
////////////////
template<> constexpr int getNumInputs<TF::D5, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, TF::D>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D5, TF::D>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D5, TF::D>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D5, TF::D>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D5, TF::D>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::D5, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::D5, TF::D>(){ // Number of DISK2S input memories
  return 2;
}

////////////////
// VMR_L1PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::A>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::A>(){
  return 0b110000110000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::B>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::B>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::B>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::B>(){
  return 0b111000001101;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::C>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::C>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::C>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::C>(){
  return 0b111000110010;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHID //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::D>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::D>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::D>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::D>(){
  return 0b111000001101;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIE //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::E>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::E>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::E>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::E>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::E>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::E>(){
  return 0b111000110010;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::E>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::E>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIF //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::F>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::F>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::F>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::F>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::F>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::F>(){
  return 0b111000001101;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::F>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::F>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIG //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::G>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::G>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::G>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::G>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::G>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::G>(){
  return 0b111000110010;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::G>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::G>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L1PHIH //
////////////////
template<> constexpr int getNumInputs<TF::L1, TF::H>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, TF::H>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, TF::H>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, TF::H>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L1, TF::H>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, TF::H>(){
  return 0b011000001100;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L1, TF::H>(){ // Number of input memories, EXCLUDING DISK2S
  return 3;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L1, TF::H>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L2, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, TF::A>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::L2, TF::A>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L2, TF::A>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::L2, TF::A>(){
  return 0b110110000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L2, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L2, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L2PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L2, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, TF::B>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::L2, TF::B>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L2, TF::B>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::L2, TF::B>(){
  return 0b111111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L2, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L2, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L2PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L2, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, TF::C>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::L2, TF::C>(){ // Allstub Inner memory
  return 6;
}
template<> constexpr int getNumTEOCopies<TF::L2, TF::C>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::L2, TF::C>(){
  return 0b111111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L2, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L2, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L2PHID //
////////////////
template<> constexpr int getNumInputs<TF::L2, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, TF::D>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::L2, TF::D>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L2, TF::D>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::L2, TF::D>(){
  return 0b011011000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L2, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L2, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L3, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, TF::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L3, TF::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L3, TF::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L3, TF::A>(){
  return 0b000110000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L3, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L3, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L3PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L3, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 7;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, TF::B>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L3, TF::B>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::L3, TF::B>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L3, TF::B>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L3, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L3, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L3PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L3, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, TF::C>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L3, TF::C>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::L3, TF::C>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L3, TF::C>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L3, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L3, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L3PHID //
////////////////
template<> constexpr int getNumInputs<TF::L3, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, TF::D>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L3, TF::D>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L3, TF::D>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L3, TF::D>(){
  return 0b000011000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L3, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L3, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L4, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, TF::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L4, TF::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L4, TF::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L4, TF::A>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L4, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L4, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L4PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L4, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, TF::B>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L4, TF::B>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L4, TF::B>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L4, TF::B>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L4, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L4, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L4PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L4, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, TF::C>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L4, TF::C>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L4, TF::C>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L4, TF::C>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L4, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L4, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L4PHID //
////////////////
template<> constexpr int getNumInputs<TF::L4, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, TF::D>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L4, TF::D>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L4, TF::D>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L4, TF::D>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L4, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L4, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L5, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, TF::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L5, TF::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L5, TF::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L5, TF::A>(){
  return 0b000110000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L5, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L5, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L5PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L5, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, TF::B>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L5, TF::B>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::L5, TF::B>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L5, TF::B>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L5, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L5, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L5PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L5, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, TF::C>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L5, TF::C>(){ // Allstub Inner memory
  return 3;
}
template<> constexpr int getNumTEOCopies<TF::L5, TF::C>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L5, TF::C>(){
  return 0b000111000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L5, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L5, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L5PHID //
////////////////
template<> constexpr int getNumInputs<TF::L5, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, TF::D>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L5, TF::D>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L5, TF::D>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L5, TF::D>(){
  return 0b000011000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L5, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L5, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L6PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L6, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, TF::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, TF::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L6, TF::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L6, TF::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L6, TF::A>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L6, TF::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L6, TF::A>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L6PHIB //
////////////////
template<> constexpr int getNumInputs<TF::L6, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, TF::B>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, TF::B>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L6, TF::B>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L6, TF::B>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L6, TF::B>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L6, TF::B>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L6, TF::B>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L6PHIC //
////////////////
template<> constexpr int getNumInputs<TF::L6, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, TF::C>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, TF::C>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L6, TF::C>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L6, TF::C>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L6, TF::C>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L6, TF::C>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L6, TF::C>(){ // Number of DISK2S input memories
  return 0;
}

////////////////
// VMR_L6PHID //
////////////////
template<> constexpr int getNumInputs<TF::L6, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, TF::D>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, TF::D>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L6, TF::D>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L6, TF::D>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L6, TF::D>(){
  return 0b000000000000;
}
// For Future Emulation
template<> constexpr int getNumInputsFE<TF::L6, TF::D>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2SFE<TF::L6, TF::D>(){ // Number of DISK2S input memories
  return 0;
}

#endif // TopFunctions_VMRouterCM_parameters_h
