#ifndef TrackletAlgorithm_VMRouterCM_parameters_h
#define TrackletAlgorithm_VMRouterCM_parameters_h

// Hardcoded number of memories and masks from the wiring.
// Generated by generate_VMRCM.py
// Contains number for the following VMRs: VMR_L1PHIA VMR_L2PHIA VMR_L3PHIA VMR_L4PHIA VMR_L5PHIA VMR_L6PHIA VMR_D1PHIA VMR_D2PHIA VMR_D3PHIA VMR_D4PHIA VMR_D5PHIA

// Enums used to get the correct parameters
enum class phiRegions : char {A = 'A', B = 'B', C = 'C', D = 'D', E = 'E', F = 'F', G = 'G', H = 'H'};

// The functions that returns parameters and LUTs
template<TF::layerDisk LayerDisk> const int* getPhiCorrTable();
template<TF::layerDisk LayerDisk> const int* getMETable();
template<TF::layerDisk LayerDisk> const int* getTETable();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumInputs();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumInputsDisk2S();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumASCopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumASInnerCopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getNumTEOCopies();
template<TF::layerDisk LayerDisk, phiRegions Phi> constexpr int getAllStubInnerMask();

// VMPhiCorr LUTs
template<> inline const int* getPhiCorrTable<TF::L1>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL1.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L2>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL2.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L3>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL3.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L4>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL4.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L5>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL5.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::L6>(){
  static int lut[] = 
#include "../emData/VMRCM/tables/VMPhiCorrL6.tab"
  return lut;
}
template<> inline const int* getPhiCorrTable<TF::D1>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D2>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D4>(){
  return nullptr;
}
template<> inline const int* getPhiCorrTable<TF::D5>(){
  return nullptr;
}

// ME Tables
template<> inline const int* getMETable<TF::L1>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L1.tab"
  return lut;
}
template<> inline const int* getMETable<TF::L2>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L2.tab"
  return lut;
}
template<> inline const int* getMETable<TF::L3>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L3.tab"
  return lut;
}
template<> inline const int* getMETable<TF::L4>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L4.tab"
  return lut;
}
template<> inline const int* getMETable<TF::L5>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L5.tab"
  return lut;
}
template<> inline const int* getMETable<TF::L6>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_L6.tab"
  return lut;
}
template<> inline const int* getMETable<TF::D1>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_D1.tab"
  return lut;
}
template<> inline const int* getMETable<TF::D2>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_D2.tab"
  return lut;
}
template<> inline const int* getMETable<TF::D3>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_D3.tab"
  return lut;
}
template<> inline const int* getMETable<TF::D4>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_D4.tab"
  return lut;
}
template<> inline const int* getMETable<TF::D5>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRME_D5.tab"
  return lut;
}

// TE Tables
template<> inline const int* getTETable<TF::L1>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L2>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L3>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L4>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L5>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::L6>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::D1>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRTE_D1.tab"
  return lut;
}
template<> inline const int* getTETable<TF::D2>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRTE_D2.tab"
  return lut;
}
template<> inline const int* getTETable<TF::D3>(){
  return nullptr;
}
template<> inline const int* getTETable<TF::D4>(){
  static int lut[] =
#include "../emData/VMRCM/tables/VMRTE_D4.tab"
  return lut;
}
template<> inline const int* getTETable<TF::D5>(){
  return nullptr;
}

////////////////
// VMR_L1PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L1, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L1, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L1, phiRegions::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L1, phiRegions::A>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L1, phiRegions::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L1, phiRegions::A>(){
  return 0b110000110000;
}

////////////////
// VMR_L2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L2, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L2, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L2, phiRegions::A>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::L2, phiRegions::A>(){ // Allstub Inner memory
  return 4;
}
template<> constexpr int getNumTEOCopies<TF::L2, phiRegions::A>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::L2, phiRegions::A>(){
  return 0b110110000000;
}

////////////////
// VMR_L3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L3, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L3, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L3, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L3, phiRegions::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L3, phiRegions::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L3, phiRegions::A>(){
  return 0b000110000000;
}

////////////////
// VMR_L4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L4, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 2;
}
template<> constexpr int getNumInputsDisk2S<TF::L4, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L4, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L4, phiRegions::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L4, phiRegions::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L4, phiRegions::A>(){
  return 0b000000000000;
}

////////////////
// VMR_L5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L5, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L5, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L5, phiRegions::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::L5, phiRegions::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::L5, phiRegions::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::L5, phiRegions::A>(){
  return 0b000110000000;
}

////////////////
// VMR_L6PHIA //
////////////////
template<> constexpr int getNumInputs<TF::L6, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::L6, phiRegions::A>(){ // Number of DISK2S input memories
  return 0;
}
template<> constexpr int getNumASCopies<TF::L6, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::L6, phiRegions::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::L6, phiRegions::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::L6, phiRegions::A>(){
  return 0b000000000000;
}

////////////////
// VMR_D1PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D1, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 6;
}
template<> constexpr int getNumInputsDisk2S<TF::D1, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D1, phiRegions::A>(){ // Allstub memory
  return 4;
}
template<> constexpr int getNumASInnerCopies<TF::D1, phiRegions::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D1, phiRegions::A>(){ // TE Outer memories
  return 3;
}
template<> constexpr int getAllStubInnerMask<TF::D1, phiRegions::A>(){
  return 0b000110000000;
}

////////////////
// VMR_D2PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D2, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 8;
}
template<> constexpr int getNumInputsDisk2S<TF::D2, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D2, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D2, phiRegions::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D2, phiRegions::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D2, phiRegions::A>(){
  return 0b000000000000;
}

////////////////
// VMR_D3PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D3, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D3, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D3, phiRegions::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D3, phiRegions::A>(){ // Allstub Inner memory
  return 2;
}
template<> constexpr int getNumTEOCopies<TF::D3, phiRegions::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D3, phiRegions::A>(){
  return 0b000110000000;
}

////////////////
// VMR_D4PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D4, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D4, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D4, phiRegions::A>(){ // Allstub memory
  return 2;
}
template<> constexpr int getNumASInnerCopies<TF::D4, phiRegions::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D4, phiRegions::A>(){ // TE Outer memories
  return 1;
}
template<> constexpr int getAllStubInnerMask<TF::D4, phiRegions::A>(){
  return 0b000000000000;
}

////////////////
// VMR_D5PHIA //
////////////////
template<> constexpr int getNumInputs<TF::D5, phiRegions::A>(){ // Number of input memories, EXCLUDING DISK2S
  return 4;
}
template<> constexpr int getNumInputsDisk2S<TF::D5, phiRegions::A>(){ // Number of DISK2S input memories
  return 2;
}
template<> constexpr int getNumASCopies<TF::D5, phiRegions::A>(){ // Allstub memory
  return 1;
}
template<> constexpr int getNumASInnerCopies<TF::D5, phiRegions::A>(){ // Allstub Inner memory
  return 1;
}
template<> constexpr int getNumTEOCopies<TF::D5, phiRegions::A>(){ // TE Outer memories
  return 0;
}
template<> constexpr int getAllStubInnerMask<TF::D5, phiRegions::A>(){
  return 0b000000000000;
}

#endif // TrackletAlgorithm_VMRouterCM_parameters_h
